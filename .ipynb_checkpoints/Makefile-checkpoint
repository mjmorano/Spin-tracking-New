##########################################################

# CC compiler options:

#CC = /opt/rocm-5.2.5/bin/hipcc
CC=g++
CC_FLAGS= -g -w -O3 -std=c++17  #-fopenmp
CC_LIBS= 

BASEGPUPATH=/usr/local/cuda-11.8
#GPUCC=$(BASEGPUPATH)/bin/nvcc
GPUCC=/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/compilers/bin/nvc++
GENCODE_FLAGS= #-gencode=arch=compute_86,code=sm_86
GPUCC_FLAGS= $(CC_FLAGS) -x cu $(GENCODE_FLAGS)
#GPUCC_FLAGS= $(CC_FLAGS) -fgpu-rdc
LINK_LIBS= -lcudart -lcurand
#LINK_LIBS= $(BASEGPUPATH)hiprand/lib
##########################################################
GPU_INCLUDE_DIR = -I$(BASEGPUPATH)/include
GPU_LIB_DIR = -L$(BASEGPUPATH)/lib64
## Project file structure ##

# Source file directory:
SRC_DIR = src

# Object file directory:
OBJ_DIR = bin

# Include header file diretory:
INC_DIR = include

##########################################################

## Make variables ##

# Target executable name:
EXE = run

# Object files:
OBJS = $(OBJ_DIR)/main.o $(OBJ_DIR)/optionsParser.o $(OBJ_DIR)/double3.o $(OBJ_DIR)/integrator.o $(OBJ_DIR)/particle.o $(OBJ_DIR)/simulation.o

##########################################################

## Compile ##

# Link c++ and CUDA compiled object files to target executable:
$(EXE) : $(OBJS)
	$(CC) $(CC_FLAGS) $(OBJS) -o $@ $(GPU_INCLUDE_DIR) $(GPU_LIB_DIR) $(LINK_LIBS)

# Compile main .cpp file to object files:
$(OBJ_DIR)/%.o : %.cpp
	$(CC) $(CC_FLAGS) -c $< -o $@

#compile the gpu code to object files
$(OBJ_DIR)/%.o : $(SRC_DIR)/%.cpp $(INC_DIR)/%.h
	$(GPUCC) $(GPUCC_FLAGS) -c $< -o temp.o $(LINK_LIBS)
	$(GPUCC) -dlink $(GENCODE_FLAGS) -o $@ temp.o $(LINK_LIBS)
# Clean objects in object directory.
clean:
	$(RM) bin/* *.o $(EXE)
